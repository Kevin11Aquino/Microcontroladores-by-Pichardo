/*
Practica 2 - Maquina de estados de puerta electrica
Profesor: Carlos Antonio Pichardo Viuque
Hecho por: Kevin Aquino Mari√±ez
*/

#include <stdio.h>
#include <stdlib.h>

#define ESTADO_ERROR        0
#define ESTADO_ABIERTO      1
#define ESTADO_CERRADO      2
#define ESTADO_ABRIENDO     3
#define ESTADO_CERRANDO     4
#define ESTADO_INTERMEDIO   5
#define ESTADO_INIT         6
#define FALSE 0
#define TRUE 1
#define inTrue 0
#define inFalse 1
#define TIME_Ca 60

/*Defino los puertos*/
#define PT_A GPIOA
#define PT_B GPIOB
#define PT_C GPIOC
/*#define PT_E GPIOE
#define PT_F GPIOF*/

/*Defino los pines*/
#define PIN_Ba GPIO_PIN_0 
#define PIN_Bc GPIO_PIN_1 
#define PIN_Sa GPIO_PIN_4
#define PIN_Sc GPIO_PIN_0
#define PIN_Ma GPIO_PIN_1
#define PIN_Mc GPIO_PIN_0
#define PIN_Led GPIO_PIN_3

int Func_ESTADO_ERROR(void);
int Func_ESTADO_ABIERTO(void);
int Func_ESTADO_CERRADO(void);
int Func_ESTADO_ABRIENDO(void);
int Func_ESTADO_CERRANDO(void);
int Func_ESTADO_INTERMEDIO(void);
int Func_ESTADO_INIT(void);
 
volatile int ESTADO_ANTERIOR = ESTADO_INIT;
volatile int ESTADO_ACTUAL = ESTADO_INIT;
volatile int ESTADO_SIGUIENTE = ESTADO_INIT;
volatile int CntTimeCa = 0;//contador de un segundo
volatile struct INOUT
{
    unsigned int Sc:1;
    unsigned int Sa:1;
    unsigned int Mc:1;
    unsigned int Ma:1;
    unsigned int Bc:1;
    unsigned int Ba:1;
    unsigned int Led:1;
} inout;
 
int main()
{
    for(;;)
    {
        if(ESTADO_SIGUIENTE == ESTADO_INIT)
        {
            ESTADO_SIGUIENTE = Func_ESTADO_INIT();
        }
 
        if(ESTADO_SIGUIENTE == ESTADO_ABIERTO)
        {
            ESTADO_SIGUIENTE = Func_ESTADO_ABIERTO();
        }
        if(ESTADO_SIGUIENTE == ESTADO_CERRADO)
        {
            ESTADO_SIGUIENTE = Func_ESTADO_CERRADO();
        }
        if(ESTADO_SIGUIENTE == ESTADO_ABRIENDO)
        {
            ESTADO_SIGUIENTE = Func_ESTADO_ABRIENDO();
        }
        if(ESTADO_SIGUIENTE == ESTADO_CERRANDO)
        {
            ESTADO_SIGUIENTE = Func_ESTADO_CERRANDO();
        }
        if(ESTADO_SIGUIENTE == ESTADO_INTERMEDIO)
        {
            ESTADO_SIGUIENTE = Func_ESTADO_INTERMEDIO();
        }
 
        if(ESTADO_SIGUIENTE == ESTADO_ERROR)
        {
            ESTADO_SIGUIENTE = Func_ESTADO_ERROR();
        }
    }
}
 
int Func_ESTADO_ERROR(void)
{
    for(;;)
    {
        inout.Led = TRUE;
    }
}
int Func_ESTADO_ABIERTO(void)
{
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
    ESTADO_ACTUAL = ESTADO_ABIERTO;
    inout.Ma = FALSE;
    inout.Mc = FALSE;
    inout.Led = FALSE;
    CntTimeCa = 0;//reset de contador
 
    for(;;)
    {
        if((CntTimeCa > TIME_Ca) || (inout.Bc == TRUE))
        {
            return ESTADO_CERRANDO;
        }
 
    }
}
int Func_ESTADO_CERRADO(void)
{
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
    ESTADO_ACTUAL = ESTADO_CERRADO;
    inout.Mc = TRUE;
    inout.Ma = FALSE;
 
    for(;;)
    {
        if(inout.Ba == TRUE)
        {
            return ESTADO_ABRIENDO;
        }
    }
 
}
int Func_ESTADO_ABRIENDO(void)
{
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
    ESTADO_ACTUAL = ESTADO_ABRIENDO;
    inout.Mc = FALSE;
    inout.Ma = TRUE;
 
    for(;;)
    {
        if(inout.Sa == TRUE)
        {
            return ESTADO_ABIERTO;
        }
        /*
         if(inout.Bc== TRUE)/*AQUI LA PUERTA NO TIENE QUE ABRIR COMPLETAMENTE PARA YO PODER CERRARLA*
         {
            return ESTADO_CERRANDO;
        }
        */
    }
}
int Func_ESTADO_CERRANDO(void)
{
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
    ESTADO_ACTUAL = ESTADO_CERRANDO;
    inout.Mc = TRUE;
    inout.Ma = FALSE;
 
    for(;;)
    {
        if(inout.Sc == TRUE)
        {
            return ESTADO_CERRADO;
        }
       /* if(inout.Ba == TRUE)/*AQUI LA PUERTA NO TIENE QUE CERRAR COMPLETAMENTE PARA YO PODER ABRIRLA*
        {
            return ESTADO_ABRIENDO;
        }*/
    }
}
int Func_ESTADO_INTERMEDIO(void)
{
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
    ESTADO_ACTUAL = ESTADO_INTERMEDIO;
    for (;;)
    {
        if(inout.Mc == inFalse)
    {
        return ESTADO_CERRANDO;
    }
        if(inout.Ma == inFalse)
    {
        return ESTADO_ABRIENDO;
    }
}
    }
    
    
int Func_ESTADO_INIT(void)
{
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
    ESTADO_ACTUAL = ESTADO_INIT;
 
    inout.Ma = FALSE;
    inout.Mc = FALSE;

    if((inout.Sa == inFalse) && (inout.Sc == inFalse))
    {
        return ESTADO_ERROR;
    }
    if((inout.Sa == inTrue) && (inout.Sc == inTrue))
    {
        return ESTADO_INTERMEDIO;
    }
     if(inout.Sa == inFalse)
    {
        return ESTADO_ABIERTO;
    }
    if(inout.Sc == inFalse)
    {
        return ESTADO_CERRADO;
    }
}
 
void intGeneral100ms(void)
{
    static int cont_int = 0;
 
    cont_int++;
 
    if(cont_int == 9)
    {
        CntTimeCa++;
        cont_int = 0;
    }
 
    if(HAL_GPIO_Read(PT_A,PIN_Bc))//leg
    {
        inout.Bc = TRUE;
    }else{
        inout.Bc = FALSE;
    }
 
    if(HAL_GPIO_Read(PT_A,PIN_Ba))//leg
    {
        inout.Ba = TRUE;
    }else{
        inout.Ba = FALSE;
    }
 
    if(HAL_GPIO_Read(PT_B,PIN_Sc))//leg
    {
         inout.Sc = TRUE;
    }else{
         inout.Sc = FALSE;
    }
     if(HAL_GPIO_Read(PT_A,PIN_Sa))//leg
    {
         inout.Sc = TRUE;
    }else{
         inout.Sc = FALSE;
    }
 
    if(inout.Ma == TRUE)//leg
    {
        HAL_GPIO_Write(PT_C,PIN_Ma,1);
    }else
    {
        HAL_GPIO_Write(PT_C,PIN_Ma,0);
    }
    if(inout.Mc == TRUE)//leg
    {
        HAL_GPIO_Write(PT_C,PIN_Mc,1);
    }else
    {
        HAL_GPIO_Write(PT_C,PIN_Mc,0);
    }
    if(inout.Led == TRUE)//leg
    {
        HAL_GPIO_Write(PT_A,PIN_Led,1);
    }else
    {
        HAL_GPIO_Write(PT_A,PIN_Led,0);
    }
}
